# Generated by Django 5.2.1 on 2025-05-14 21:50

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Utilisateur',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('telephone', models.CharField(blank=True, max_length=20)),
                ('role', models.CharField(choices=[('joueur', 'Joueur'), ('organisateur', 'Organisateur'), ('administrateur', 'Administrateur'), ('arbitre', 'Arbitre')], max_length=20)),
                ('date_inscription', models.DateTimeField(auto_now_add=True)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Administrateur',
            fields=[
                ('utilisateur', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='administrateur_profile', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('niveau_acces', models.CharField(choices=[('basique', 'Basique'), ('moderateur', 'Modérateur'), ('superadmin', 'Super Admin')], default='basique', max_length=20)),
            ],
            options={
                'verbose_name': 'Administrateur',
                'verbose_name_plural': 'Administrateurs',
            },
        ),
        migrations.CreateModel(
            name='Arbitre',
            fields=[
                ('utilisateur', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='arbitre_profile', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('certification', models.CharField(max_length=100)),
                ('experience', models.IntegerField(default=0, help_text="Années d'expérience")),
                ('specialite', models.CharField(blank=True, max_length=100)),
                ('est_certifie', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Arbitre',
                'verbose_name_plural': 'Arbitres',
            },
        ),
        migrations.CreateModel(
            name='Joueur',
            fields=[
                ('utilisateur', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='joueur_profile', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('niveau', models.CharField(choices=[('debutant', 'Débutant'), ('intermediaire', 'Intermédiaire'), ('avance', 'Avancé'), ('expert', 'Expert')], default='debutant', max_length=20)),
                ('classement', models.IntegerField(blank=True, null=True)),
                ('bio', models.TextField(blank=True)),
                ('date_naissance', models.DateField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Joueur',
                'verbose_name_plural': 'Joueurs',
            },
        ),
        migrations.CreateModel(
            name='Organisateur',
            fields=[
                ('utilisateur', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='organisateur_profile', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('nom_organisation', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('site_web', models.URLField(blank=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='organisateurs/logos/')),
                ('est_verifie', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Organisateur',
                'verbose_name_plural': 'Organisateurs',
            },
        ),
        migrations.CreateModel(
            name='Paiement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('montant', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('date_paiement', models.DateTimeField(auto_now_add=True)),
                ('methode', models.CharField(choices=[('carte', 'Carte bancaire'), ('virement', 'Virement bancaire'), ('especes', 'Espèces'), ('autre', 'Autre')], max_length=20)),
                ('statut', models.CharField(choices=[('en_attente', 'En attente'), ('paye', 'Payé'), ('refuse', 'Refusé'), ('rembourse', 'Remboursé')], default='en_attente', max_length=20)),
                ('reference', models.CharField(blank=True, max_length=100)),
                ('details', models.JSONField(blank=True, default=dict)),
                ('joueur', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='paiements', to='tournois.joueur')),
            ],
            options={
                'verbose_name': 'Paiement',
                'verbose_name_plural': 'Paiements',
                'ordering': ['-date_paiement'],
            },
        ),
        migrations.CreateModel(
            name='Tournoi',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('type', models.CharField(choices=[('elimination', 'Élimination simple'), ('round-robin', 'Round Robin'), ('mixte', 'Format mixte')], max_length=20)),
                ('regles', models.TextField(blank=True)),
                ('date_debut', models.DateTimeField()),
                ('date_fin', models.DateTimeField()),
                ('prix_inscription', models.DecimalField(decimal_places=2, default=0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('statut', models.CharField(choices=[('planifie', 'Planifié'), ('en_cours', 'En cours'), ('termine', 'Terminé'), ('annule', 'Annulé')], default='planifie', max_length=20)),
                ('jeu', models.CharField(max_length=100)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='tournois/logos/')),
                ('nombre_equipes_max', models.PositiveIntegerField(default=16)),
                ('recompense', models.DecimalField(blank=True, decimal_places=2, help_text='Récompense totale pour le tournoi', max_digits=10, null=True)),
                ('organisateur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournois', to='tournois.organisateur')),
            ],
            options={
                'verbose_name': 'Tournoi',
                'verbose_name_plural': 'Tournois',
                'ordering': ['-date_debut'],
            },
        ),
        migrations.CreateModel(
            name='Equipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100, unique=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='equipes/logos/')),
                ('date_creation', models.DateTimeField(auto_now_add=True)),
                ('jeu', models.CharField(help_text="Jeu principal de l'équipe", max_length=100)),
                ('tag', models.CharField(blank=True, help_text="Tag court de l'équipe (ex: FNC)", max_length=10)),
                ('organisateur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='equipes', to='tournois.organisateur')),
            ],
            options={
                'verbose_name': 'Équipe',
                'verbose_name_plural': 'Équipes',
                'ordering': ['nom'],
            },
        ),
        migrations.CreateModel(
            name='Rencontre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(blank=True, max_length=100)),
                ('date_heure', models.DateTimeField()),
                ('duree', models.PositiveIntegerField(blank=True, help_text='Durée estimée en minutes', null=True)),
                ('score_equipe1', models.PositiveIntegerField(blank=True, null=True)),
                ('score_equipe2', models.PositiveIntegerField(blank=True, null=True)),
                ('statut', models.CharField(choices=[('planifie', 'Planifié'), ('en_cours', 'En cours'), ('termine', 'Terminé'), ('annule', 'Annulé'), ('reporte', 'Reporté')], default='planifie', max_length=20)),
                ('terrain', models.CharField(blank=True, max_length=100)),
                ('stream_url', models.URLField(blank=True)),
                ('vod_url', models.URLField(blank=True, help_text='Lien vers la vidéo du match')),
                ('equipe1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rencontres_equipe1', to='tournois.equipe')),
                ('equipe2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rencontres_equipe2', to='tournois.equipe')),
                ('tournoi', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rencontres', to='tournois.tournoi')),
                ('arbitre', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rencontres_arbitrees', to='tournois.arbitre')),
            ],
            options={
                'verbose_name': 'Rencontre',
                'verbose_name_plural': 'Rencontres',
                'ordering': ['date_heure'],
                'constraints': [models.CheckConstraint(condition=models.Q(('equipe1', models.F('equipe2')), _negated=True), name='check_equipes_differentes')],
            },
        ),
        migrations.CreateModel(
            name='JoueurEquipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_ajout', models.DateTimeField(auto_now_add=True)),
                ('role', models.CharField(choices=[('capitaine', 'Capitaine'), ('membre', 'Membre'), ('remplacant', 'Remplaçant')], default='membre', max_length=20)),
                ('est_actif', models.BooleanField(default=True)),
                ('equipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='membres', to='tournois.equipe')),
                ('joueur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='membre_equipes', to='tournois.joueur')),
            ],
            options={
                'verbose_name': "Membre d'équipe",
                'verbose_name_plural': "Membres d'équipe",
                'constraints': [models.UniqueConstraint(fields=('joueur', 'equipe'), name='unique_joueur_equipe')],
            },
        ),
        migrations.AddConstraint(
            model_name='tournoi',
            constraint=models.CheckConstraint(condition=models.Q(('date_fin__gt', models.F('date_debut'))), name='check_date_fin_apres_debut'),
        ),
    ]
